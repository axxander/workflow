steps:

# Preparation Stage
- name: 'bash'
  id: 'Delete ancillary docker-compose files'
  args: ['rm', 'docker-compose.override.yml']

# Build workflow image
- name: 'gcr.io/cloud-builders/docker'
  id: 'Build prod image'
  args: ['compose', 'build', 'workflow']
  env:
    - 'DOCKER_BUILDKIT=1'
    - 'ENV=prod'
    - 'IMAGE_REGISTRY=gcr.io/$PROJECT_ID'
    - 'CACHE_TAG=$BRANCH_NAME.$SHORT_SHA'

# Tag workflow image
- name: 'gcr.io/cloud-builders/docker'
  id: "Tag prod image"
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    docker tag workspace_workflow:latest gcr.io/$PROJECT_ID/workflow:$$CACHE_TAG
    docker tag workspace_workflow:latest gcr.io/$PROJECT_ID/workflow
  env:
    - 'CACHE_TAG=$BRANCH_NAME.$SHORT_SHA'

# Deploy the DAG manifest
- name: 'bash'
  id: 'Inject image tag into the DAG manifest'
  args:
  - '-c'
  - |
    sed -i 's/docker_tag_placeholder/'$$CACHE_TAG'/g' dag-manifest.yaml
  env:
    - 'CACHE_TAG=$BRANCH_NAME.$SHORT_SHA'

- name: 'gcr.io/cloud-builders/gsutil'
  id: 'Deploy DAG manifest'
  entrypoint: 'bash'  # required for gsutil
  args: ['cp', 'dag-manifest.yaml', '$$GCS_BUCKET/$$DAG_MANIFEST_PATH']
  env:
    - 'GCS_BUCKET=gs://madecom-dev-alex-gregory-sandbox'
    - 'DAG_MANIFEST_PATH=dags/workflow.yaml'

images:
  - 'gcr.io/$PROJECT_ID/workflow'
