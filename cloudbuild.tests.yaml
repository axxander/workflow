steps:

- name: 'bash'
  id: 'rm docker-compose.override.yml to rm volumes'
  args: ['rm', 'docker-compose.override.yml']

- name: 'bash'
  id: 'Load build variables into environment file'
  args:
  - '-c'
  - |
    cat vars/build/default.env >> /workspace/.env
    cat vars/build/prod.env >> /workspace/.env
    echo "DOCKER_TAG=tmp" >> /workspace/.env

# - name: 'gcr.io/cloud-builders/docker'
#   id: 'build test image'
#   args: ['build', '-t', 'workflow-tests', '--target', 'workflow-tests', '.']

# Can use docker-compose commands directly as specified by https://github.com/GoogleCloudPlatform/cloud-builders-community/tree/master/docker-compose
# - name: 'gcr.io/cloud-builders/docker'
#   id: 'build test image'
#   args: ['build', 'workflow-tests']

# - name: 'gcr.io/cloud-builders/docker'
#   id: 'run tests'
#   args: ['run', 'workflow-tests']

# Tag image to GCR for caching later?
- name: 'gcr.io/cloud-builders/docker'
  id: 'Build test image'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    make build-ci SERVICE=workflow-tests

- name: 'gcr.io/cloud-builders/docker'
  id: 'Run tests'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    make run-ci SERVICE=workflow-tests

- name: 'gcr.io/cloud-builders/docker'
  id: 'Tag and push test image'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    source /workspace.env
    IMAGE_REGISTRY=$$IMAGE_REGISTRY
    DOCKER_TAG=$$DOCKER_TAG
    make push-ci SERVICE=workflow-tests


# docker tag ${IMAGE_REGISTRY}/workflow:${DOCKER_TAG} ${IMAGE_REGISTRY}/workflow:latest

# Stages
# 1) Delete files that could influence build
# 2) Build the test image: use dc
# 3) Run the tests: use dc
# 4) Tag test for caching later stages: use dc
# 5) Push to GCR: use dc
